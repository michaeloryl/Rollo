module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

      peg$FAILED = {},

      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction  = peg$parsestart,

      peg$c0 = "speed",
      peg$c1 = { type: "literal", value: "speed", description: "\"speed\"" },
      peg$c2 = "waitForTap",
      peg$c3 = { type: "literal", value: "waitForTap", description: "\"waitForTap\"" },
      peg$c4 = "waitForHit",
      peg$c5 = { type: "literal", value: "waitForHit", description: "\"waitForHit\"" },
      peg$c6 = "wait",
      peg$c7 = { type: "literal", value: "wait", description: "\"wait\"" },
      peg$c8 = "delay",
      peg$c9 = { type: "literal", value: "delay", description: "\"delay\"" },
      peg$c10 = "go",
      peg$c11 = { type: "literal", value: "go", description: "\"go\"" },
      peg$c12 = "turnRight",
      peg$c13 = { type: "literal", value: "turnRight", description: "\"turnRight\"" },
      peg$c14 = "right",
      peg$c15 = { type: "literal", value: "right", description: "\"right\"" },
      peg$c16 = "turnLeft",
      peg$c17 = { type: "literal", value: "turnLeft", description: "\"turnLeft\"" },
      peg$c18 = "left",
      peg$c19 = { type: "literal", value: "left", description: "\"left\"" },
      peg$c20 = "turn",
      peg$c21 = { type: "literal", value: "turn", description: "\"turn\"" },
      peg$c22 = "flash",
      peg$c23 = { type: "literal", value: "flash", description: "\"flash\"" },
      peg$c24 = "color",
      peg$c25 = { type: "literal", value: "color", description: "\"color\"" },
      peg$c26 = "pulse",
      peg$c27 = { type: "literal", value: "pulse", description: "\"pulse\"" },
      peg$c28 = "log",
      peg$c29 = { type: "literal", value: "log", description: "\"log\"" },
      peg$c30 = "say",
      peg$c31 = { type: "literal", value: "say", description: "\"say\"" },
      peg$c32 = "gosub",
      peg$c33 = { type: "literal", value: "gosub", description: "\"gosub\"" },
      peg$c34 = "loop",
      peg$c35 = { type: "literal", value: "loop", description: "\"loop\"" },
      peg$c36 = "repeat",
      peg$c37 = { type: "literal", value: "repeat", description: "\"repeat\"" },
      peg$c38 = "sub",
      peg$c39 = { type: "literal", value: "sub", description: "\"sub\"" },
      peg$c40 = "stopFast",
      peg$c41 = { type: "literal", value: "stopFast", description: "\"stopFast\"" },
      peg$c42 = "stop",
      peg$c43 = { type: "literal", value: "stop", description: "\"stop\"" },
      peg$c44 = "turnAround",
      peg$c45 = { type: "literal", value: "turnAround", description: "\"turnAround\"" },
      peg$c46 = "reverse",
      peg$c47 = { type: "literal", value: "reverse", description: "\"reverse\"" },
      peg$c48 = "pointMe",
      peg$c49 = { type: "literal", value: "pointMe", description: "\"pointMe\"" },
      peg$c50 = [],
      peg$c51 = peg$FAILED,
      peg$c52 = /^[0-9.]/,
      peg$c53 = { type: "class", value: "[0-9.]", description: "[0-9.]" },
      peg$c54 = function(n) { return parseInt(n.join("")); },
      peg$c55 = "-",
      peg$c56 = { type: "literal", value: "-", description: "\"-\"" },
      peg$c57 = function(n) { return parseInt('-' + n.join("")); },
      peg$c58 = "0x",
      peg$c59 = { type: "literal", value: "0x", description: "\"0x\"" },
      peg$c60 = /^[0-9a-fA-F]/,
      peg$c61 = { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
      peg$c62 = function(n1, n2) { return parseInt(n1 + n2.join("")); },
      peg$c63 = " ",
      peg$c64 = { type: "literal", value: " ", description: "\" \"" },
      peg$c65 = "time",
      peg$c66 = { type: "literal", value: "time", description: "\"time\"" },
      peg$c67 = null,
      peg$c68 = "s",
      peg$c69 = { type: "literal", value: "s", description: "\"s\"" },
      peg$c70 = "%",
      peg$c71 = { type: "literal", value: "%", description: "\"%\"" },
      peg$c72 = "second",
      peg$c73 = { type: "literal", value: "second", description: "\"second\"" },
      peg$c74 = "degree",
      peg$c75 = { type: "literal", value: "degree", description: "\"degree\"" },
      peg$c76 = /^[a-z,A-Z,0-9]/,
      peg$c77 = { type: "class", value: "[a-z,A-Z,0-9]", description: "[a-z,A-Z,0-9]" },
      peg$c78 = function(s) { return s.join(""); },
      peg$c79 = /^[a-z,A-Z,0-9 ]/,
      peg$c80 = { type: "class", value: "[a-z,A-Z,0-9 ]", description: "[a-z,A-Z,0-9 ]" },
      peg$c81 = function(c, l, b) { return [c, l, b]; },
      peg$c82 = "(",
      peg$c83 = { type: "literal", value: "(", description: "\"(\"" },
      peg$c84 = ")",
      peg$c85 = { type: "literal", value: ")", description: "\")\"" },
      peg$c86 = function(c, n, b) { return [c, n, b]; },
      peg$c87 = function(c, n) { return [c, n]; },
      peg$c88 = /^[']/,
      peg$c89 = { type: "class", value: "[']", description: "[']" },
      peg$c90 = function(c, s) { return [c, s]; },
      peg$c91 = /^["]/,
      peg$c92 = { type: "class", value: "[\"]", description: "[\"]" },
      peg$c93 = "()",
      peg$c94 = { type: "literal", value: "()", description: "\"()\"" },
      peg$c95 = function(c) { return [c]; },
      peg$c96 = "\n",
      peg$c97 = { type: "literal", value: "\n", description: "\"\\n\"" },
      peg$c98 = "\n\r",
      peg$c99 = { type: "literal", value: "\n\r", description: "\"\\n\\r\"" },
      peg$c100 = "\r\n",
      peg$c101 = { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
      peg$c102 = "{",
      peg$c103 = { type: "literal", value: "{", description: "\"{\"" },
      peg$c104 = "}",
      peg$c105 = { type: "literal", value: "}", description: "\"}\"" },
      peg$c106 = function(i) { return i },
      peg$c107 = function(s) { return s },

      peg$currPos          = 0,
      peg$reportedPos      = 0,
      peg$cachedPos        = 0,
      peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
          expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
        + " or "
        + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
        found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parselines();

      return s0;
    }

    function peg$parsecmdWithPercent() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c0) {
        s0 = peg$c0;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1); }
      }

      return s0;
    }

    function peg$parsecmdWithSeconds() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c2) {
        s0 = peg$c2;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c4) {
          s0 = peg$c4;
          peg$currPos += 10;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c6) {
            s0 = peg$c6;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c8) {
              s0 = peg$c8;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c9); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c10) {
                s0 = peg$c10;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c11); }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecmdWithPosDegrees() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c12) {
        s0 = peg$c12;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c13); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c14) {
          s0 = peg$c14;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c15); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c16) {
            s0 = peg$c16;
            peg$currPos += 8;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c17); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c18) {
              s0 = peg$c18;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c19); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecmdWithDegrees() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c20) {
        s0 = peg$c20;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }

      return s0;
    }

    function peg$parsecmdWithHexNumber() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c22) {
        s0 = peg$c22;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c24) {
          s0 = peg$c24;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c25); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c26) {
            s0 = peg$c26;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c27); }
          }
        }
      }

      return s0;
    }

    function peg$parsecmdWithString() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c28) {
        s0 = peg$c28;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c30) {
          s0 = peg$c30;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c31); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c22) {
            s0 = peg$c22;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c24) {
              s0 = peg$c24;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c25); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c26) {
                s0 = peg$c26;
                peg$currPos += 5;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c27); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c32) {
                  s0 = peg$c32;
                  peg$currPos += 5;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c33); }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecmdBlock() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c34) {
        s0 = peg$c34;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c35); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c36) {
          s0 = peg$c36;
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c37); }
        }
      }

      return s0;
    }

    function peg$parsecmdBlockWithLabel() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c38) {
        s0 = peg$c38;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }

      return s0;
    }

    function peg$parsecmd() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c10) {
        s0 = peg$c10;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c40) {
          s0 = peg$c40;
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c41); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c42) {
            s0 = peg$c42;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c43); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 10) === peg$c2) {
              s0 = peg$c2;
              peg$currPos += 10;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c3); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c4) {
                s0 = peg$c4;
                peg$currPos += 10;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c5); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 10) === peg$c44) {
                  s0 = peg$c44;
                  peg$currPos += 10;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c45); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 7) === peg$c46) {
                    s0 = peg$c46;
                    peg$currPos += 7;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c47); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 8) === peg$c16) {
                      s0 = peg$c16;
                      peg$currPos += 8;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c17); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c18) {
                        s0 = peg$c18;
                        peg$currPos += 4;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c19); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 9) === peg$c12) {
                          s0 = peg$c12;
                          peg$currPos += 9;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c13); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c14) {
                            s0 = peg$c14;
                            peg$currPos += 5;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c15); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 7) === peg$c48) {
                              s0 = peg$c48;
                              peg$currPos += 7;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c49); }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c52.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c52.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c53); }
          }
        }
      } else {
        s1 = peg$c51;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c54(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c55;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c56); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$c52.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c53); }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c52.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c53); }
              }
            }
          } else {
            s2 = peg$c51;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c57(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c51;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c51;
        }
      }

      return s0;
    }

    function peg$parseposNumber() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c52.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c52.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c53); }
          }
        }
      } else {
        s1 = peg$c51;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c54(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsehexNumber() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c58) {
        s1 = peg$c58;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c59); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c60.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c61); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c60.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c61); }
            }
          }
        } else {
          s2 = peg$c51;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c62(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c51;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c51;
      }

      return s0;
    }

    function peg$parsetimes() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c63;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (input.charCodeAt(peg$currPos) === 32) {
            s2 = peg$c63;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c64); }
          }
        }
      } else {
        s1 = peg$c51;
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c65) {
          s2 = peg$c65;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 115) {
            s3 = peg$c68;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c69); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c67;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c51;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c51;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c51;
      }

      return s0;
    }

    function peg$parsepercent() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c63;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c63;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c64); }
        }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 37) {
          s2 = peg$c70;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c71); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c51;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c51;
      }

      return s0;
    }

    function peg$parseseconds() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c63;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (input.charCodeAt(peg$currPos) === 32) {
            s2 = peg$c63;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c64); }
          }
        }
      } else {
        s1 = peg$c51;
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c72) {
          s2 = peg$c72;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c73); }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 115) {
            s3 = peg$c68;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c69); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c67;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c51;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c51;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c51;
      }

      return s0;
    }

    function peg$parsedegrees() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c63;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (input.charCodeAt(peg$currPos) === 32) {
            s2 = peg$c63;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c64); }
          }
        }
      } else {
        s1 = peg$c51;
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c74) {
          s2 = peg$c74;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c75); }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 115) {
            s3 = peg$c68;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c69); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c67;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c51;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c51;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c51;
      }

      return s0;
    }

    function peg$parselabel() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c76.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c76.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c77); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c78(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c79.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c80); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c79.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c80); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c78(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenoBlockStatement() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsecmdBlockWithLabel();
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (input.charCodeAt(peg$currPos) === 32) {
          s3 = peg$c63;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c64); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (input.charCodeAt(peg$currPos) === 32) {
              s3 = peg$c63;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c64); }
            }
          }
        } else {
          s2 = peg$c51;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselabel();
          if (s3 !== peg$FAILED) {
            s4 = [];
            if (input.charCodeAt(peg$currPos) === 32) {
              s5 = peg$c63;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c64); }
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (input.charCodeAt(peg$currPos) === 32) {
                s5 = peg$c63;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c64); }
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseblock();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c81(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c51;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c51;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c51;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c51;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c51;
      }

      return s0;
    }

    function peg$parsestatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsecmdBlock();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c82;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c83); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenumber();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetimes();
            if (s4 === peg$FAILED) {
              s4 = peg$c67;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c84;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c85); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                if (input.charCodeAt(peg$currPos) === 32) {
                  s7 = peg$c63;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c64); }
                }
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  if (input.charCodeAt(peg$currPos) === 32) {
                    s7 = peg$c63;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c64); }
                  }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseblock();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c86(s1, s3, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c51;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c51;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c51;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c51;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c51;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c51;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c51;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecmdBlock();
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (input.charCodeAt(peg$currPos) === 32) {
            s3 = peg$c63;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c64); }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (input.charCodeAt(peg$currPos) === 32) {
                s3 = peg$c63;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c64); }
              }
            }
          } else {
            s2 = peg$c51;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsenumber();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsetimes();
              if (s4 === peg$FAILED) {
                s4 = peg$c67;
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                if (input.charCodeAt(peg$currPos) === 32) {
                  s6 = peg$c63;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c64); }
                }
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  if (input.charCodeAt(peg$currPos) === 32) {
                    s6 = peg$c63;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c64); }
                  }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseblock();
                  if (s6 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c86(s1, s3, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c51;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c51;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c51;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c51;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c51;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c51;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsecmdWithPercent();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s2 = peg$c82;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c83); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseposNumber();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsepercent();
                if (s4 === peg$FAILED) {
                  s4 = peg$c67;
                }
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s5 = peg$c84;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c85); }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c87(s1, s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c51;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c51;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c51;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c51;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c51;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsecmdWithPercent();
            if (s1 !== peg$FAILED) {
              s2 = [];
              if (input.charCodeAt(peg$currPos) === 32) {
                s3 = peg$c63;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c64); }
              }
              if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  if (input.charCodeAt(peg$currPos) === 32) {
                    s3 = peg$c63;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c64); }
                  }
                }
              } else {
                s2 = peg$c51;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseposNumber();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsepercent();
                  if (s4 === peg$FAILED) {
                    s4 = peg$c67;
                  }
                  if (s4 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c87(s1, s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c51;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c51;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c51;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c51;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsecmdWithSeconds();
              if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 40) {
                  s2 = peg$c82;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c83); }
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseposNumber();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseseconds();
                    if (s4 === peg$FAILED) {
                      s4 = peg$c67;
                    }
                    if (s4 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s5 = peg$c84;
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c85); }
                      }
                      if (s5 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c87(s1, s3);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c51;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c51;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c51;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c51;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c51;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsecmdWithSeconds();
                if (s1 !== peg$FAILED) {
                  s2 = [];
                  if (input.charCodeAt(peg$currPos) === 32) {
                    s3 = peg$c63;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c64); }
                  }
                  if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                      s2.push(s3);
                      if (input.charCodeAt(peg$currPos) === 32) {
                        s3 = peg$c63;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c64); }
                      }
                    }
                  } else {
                    s2 = peg$c51;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseposNumber();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseseconds();
                      if (s4 === peg$FAILED) {
                        s4 = peg$c67;
                      }
                      if (s4 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c87(s1, s3);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c51;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c51;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c51;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c51;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsecmdWithPosDegrees();
                  if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                      s2 = peg$c82;
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c83); }
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseposNumber();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsedegrees();
                        if (s4 === peg$FAILED) {
                          s4 = peg$c67;
                        }
                        if (s4 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s5 = peg$c84;
                            peg$currPos++;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c85); }
                          }
                          if (s5 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c87(s1, s3);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c51;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c51;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c51;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c51;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c51;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsecmdWithPosDegrees();
                    if (s1 !== peg$FAILED) {
                      s2 = [];
                      if (input.charCodeAt(peg$currPos) === 32) {
                        s3 = peg$c63;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c64); }
                      }
                      if (s3 !== peg$FAILED) {
                        while (s3 !== peg$FAILED) {
                          s2.push(s3);
                          if (input.charCodeAt(peg$currPos) === 32) {
                            s3 = peg$c63;
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c64); }
                          }
                        }
                      } else {
                        s2 = peg$c51;
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseposNumber();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parsedegrees();
                          if (s4 === peg$FAILED) {
                            s4 = peg$c67;
                          }
                          if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c87(s1, s3);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c51;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c51;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c51;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c51;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parsecmdWithDegrees();
                      if (s1 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                          s2 = peg$c82;
                          peg$currPos++;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c83); }
                        }
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parsenumber();
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parsedegrees();
                            if (s4 === peg$FAILED) {
                              s4 = peg$c67;
                            }
                            if (s4 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s5 = peg$c84;
                                peg$currPos++;
                              } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c85); }
                              }
                              if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c87(s1, s3);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c51;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c51;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c51;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c51;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c51;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsecmdWithDegrees();
                        if (s1 !== peg$FAILED) {
                          s2 = [];
                          if (input.charCodeAt(peg$currPos) === 32) {
                            s3 = peg$c63;
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c64); }
                          }
                          if (s3 !== peg$FAILED) {
                            while (s3 !== peg$FAILED) {
                              s2.push(s3);
                              if (input.charCodeAt(peg$currPos) === 32) {
                                s3 = peg$c63;
                                peg$currPos++;
                              } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c64); }
                              }
                            }
                          } else {
                            s2 = peg$c51;
                          }
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parsenumber();
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parsedegrees();
                              if (s4 === peg$FAILED) {
                                s4 = peg$c67;
                              }
                              if (s4 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c87(s1, s3);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c51;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c51;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c51;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c51;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parsecmdWithHexNumber();
                          if (s1 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 40) {
                              s2 = peg$c82;
                              peg$currPos++;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c83); }
                            }
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parsehexNumber();
                              if (s3 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                  s4 = peg$c84;
                                  peg$currPos++;
                                } else {
                                  s4 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c85); }
                                }
                                if (s4 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c87(s1, s3);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c51;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c51;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c51;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c51;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parsecmdWithHexNumber();
                            if (s1 !== peg$FAILED) {
                              s2 = [];
                              if (input.charCodeAt(peg$currPos) === 32) {
                                s3 = peg$c63;
                                peg$currPos++;
                              } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c64); }
                              }
                              if (s3 !== peg$FAILED) {
                                while (s3 !== peg$FAILED) {
                                  s2.push(s3);
                                  if (input.charCodeAt(peg$currPos) === 32) {
                                    s3 = peg$c63;
                                    peg$currPos++;
                                  } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c64); }
                                  }
                                }
                              } else {
                                s2 = peg$c51;
                              }
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parsehexNumber();
                                if (s3 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c87(s1, s3);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c51;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c51;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c51;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parsecmdWithString();
                              if (s1 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 40) {
                                  s2 = peg$c82;
                                  peg$currPos++;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c83); }
                                }
                                if (s2 !== peg$FAILED) {
                                  if (peg$c88.test(input.charAt(peg$currPos))) {
                                    s3 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                  } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c89); }
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parsestring();
                                    if (s4 !== peg$FAILED) {
                                      if (peg$c88.test(input.charAt(peg$currPos))) {
                                        s5 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                      } else {
                                        s5 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c89); }
                                      }
                                      if (s5 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                          s6 = peg$c84;
                                          peg$currPos++;
                                        } else {
                                          s6 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c85); }
                                        }
                                        if (s6 !== peg$FAILED) {
                                          peg$reportedPos = s0;
                                          s1 = peg$c90(s1, s4);
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c51;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c51;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c51;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c51;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c51;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c51;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parsecmdWithString();
                                if (s1 !== peg$FAILED) {
                                  s2 = [];
                                  if (input.charCodeAt(peg$currPos) === 32) {
                                    s3 = peg$c63;
                                    peg$currPos++;
                                  } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c64); }
                                  }
                                  if (s3 !== peg$FAILED) {
                                    while (s3 !== peg$FAILED) {
                                      s2.push(s3);
                                      if (input.charCodeAt(peg$currPos) === 32) {
                                        s3 = peg$c63;
                                        peg$currPos++;
                                      } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c64); }
                                      }
                                    }
                                  } else {
                                    s2 = peg$c51;
                                  }
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parsestring();
                                    if (s3 !== peg$FAILED) {
                                      if (peg$c88.test(input.charAt(peg$currPos))) {
                                        s4 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                      } else {
                                        s4 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c89); }
                                      }
                                      if (s4 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c90(s1, s3);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c51;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c51;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c51;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c51;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parsecmdWithString();
                                  if (s1 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 40) {
                                      s2 = peg$c82;
                                      peg$currPos++;
                                    } else {
                                      s2 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c83); }
                                    }
                                    if (s2 !== peg$FAILED) {
                                      if (peg$c91.test(input.charAt(peg$currPos))) {
                                        s3 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                      } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c92); }
                                      }
                                      if (s3 !== peg$FAILED) {
                                        s4 = peg$parsestring();
                                        if (s4 !== peg$FAILED) {
                                          if (peg$c91.test(input.charAt(peg$currPos))) {
                                            s5 = input.charAt(peg$currPos);
                                            peg$currPos++;
                                          } else {
                                            s5 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c92); }
                                          }
                                          if (s5 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 41) {
                                              s6 = peg$c84;
                                              peg$currPos++;
                                            } else {
                                              s6 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c85); }
                                            }
                                            if (s6 !== peg$FAILED) {
                                              peg$reportedPos = s0;
                                              s1 = peg$c90(s1, s4);
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c51;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c51;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c51;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c51;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c51;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c51;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parsecmdWithString();
                                    if (s1 !== peg$FAILED) {
                                      s2 = [];
                                      if (input.charCodeAt(peg$currPos) === 32) {
                                        s3 = peg$c63;
                                        peg$currPos++;
                                      } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c64); }
                                      }
                                      if (s3 !== peg$FAILED) {
                                        while (s3 !== peg$FAILED) {
                                          s2.push(s3);
                                          if (input.charCodeAt(peg$currPos) === 32) {
                                            s3 = peg$c63;
                                            peg$currPos++;
                                          } else {
                                            s3 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c64); }
                                          }
                                        }
                                      } else {
                                        s2 = peg$c51;
                                      }
                                      if (s2 !== peg$FAILED) {
                                        s3 = peg$parsestring();
                                        if (s3 !== peg$FAILED) {
                                          if (peg$c91.test(input.charAt(peg$currPos))) {
                                            s4 = input.charAt(peg$currPos);
                                            peg$currPos++;
                                          } else {
                                            s4 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c92); }
                                          }
                                          if (s4 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c90(s1, s3);
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c51;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c51;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c51;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c51;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parsecmd();
                                      if (s1 !== peg$FAILED) {
                                        if (input.substr(peg$currPos, 2) === peg$c93) {
                                          s2 = peg$c93;
                                          peg$currPos += 2;
                                        } else {
                                          s2 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c94); }
                                        }
                                        if (s2 !== peg$FAILED) {
                                          peg$reportedPos = s0;
                                          s1 = peg$c95(s1);
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c51;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c51;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parsecmd();
                                        if (s1 !== peg$FAILED) {
                                          peg$reportedPos = s0;
                                          s1 = peg$c95(s1);
                                        }
                                        s0 = s1;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseendline() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c96;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c97); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c98) {
          s0 = peg$c98;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c99); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c100) {
            s0 = peg$c100;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c101); }
          }
        }
      }

      return s0;
    }

    function peg$parseblock() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c102;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c103); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseendline();
        if (s2 === peg$FAILED) {
          s2 = peg$c67;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseblockLine();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseblockLine();
            }
          } else {
            s3 = peg$c51;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            if (input.charCodeAt(peg$currPos) === 32) {
              s5 = peg$c63;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c64); }
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (input.charCodeAt(peg$currPos) === 32) {
                s5 = peg$c63;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c64); }
              }
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c104;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c105); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseendline();
                if (s6 === peg$FAILED) {
                  s6 = peg$c67;
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c106(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c51;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c51;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c51;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c51;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c51;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c51;
      }

      return s0;
    }

    function peg$parseblockLine() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c63;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c63;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c64); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestatement();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseendline();
          if (s3 === peg$FAILED) {
            s3 = peg$c67;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c107(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c51;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c51;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c51;
      }

      return s0;
    }

    function peg$parsenoBlockLine() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c63;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c63;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c64); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenoBlockStatement();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseendline();
          if (s3 === peg$FAILED) {
            s3 = peg$c67;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c107(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c51;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c51;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c51;
      }

      return s0;
    }

    function peg$parseline() {
      var s0;

      s0 = peg$parseblockLine();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenoBlockLine();
      }

      return s0;
    }

    function peg$parselines() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseline();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseline();
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();

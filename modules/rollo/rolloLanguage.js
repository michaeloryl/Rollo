/**
 * Created with IntelliJ IDEA.
 * User: mfo
 * Date: 5/11/15
 * Time: 8:15 PM
 */
module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

      peg$FAILED = {},

      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction  = peg$parsestart,

      peg$c0 = "turnRight",
      peg$c1 = { type: "literal", value: "turnRight", description: "\"turnRight\"" },
      peg$c2 = "turnLeft",
      peg$c3 = { type: "literal", value: "turnLeft", description: "\"turnLeft\"" },
      peg$c4 = "speed",
      peg$c5 = { type: "literal", value: "speed", description: "\"speed\"" },
      peg$c6 = "wait",
      peg$c7 = { type: "literal", value: "wait", description: "\"wait\"" },
      peg$c8 = "turn",
      peg$c9 = { type: "literal", value: "turn", description: "\"turn\"" },
      peg$c10 = "log",
      peg$c11 = { type: "literal", value: "log", description: "\"log\"" },
      peg$c12 = "say",
      peg$c13 = { type: "literal", value: "say", description: "\"say\"" },
      peg$c14 = "flash",
      peg$c15 = { type: "literal", value: "flash", description: "\"flash\"" },
      peg$c16 = "setColor",
      peg$c17 = { type: "literal", value: "setColor", description: "\"setColor\"" },
      peg$c18 = "loop",
      peg$c19 = { type: "literal", value: "loop", description: "\"loop\"" },
      peg$c20 = "go",
      peg$c21 = { type: "literal", value: "go", description: "\"go\"" },
      peg$c22 = "stop",
      peg$c23 = { type: "literal", value: "stop", description: "\"stop\"" },
      peg$c24 = "waitForTap",
      peg$c25 = { type: "literal", value: "waitForTap", description: "\"waitForTap\"" },
      peg$c26 = "turnAround",
      peg$c27 = { type: "literal", value: "turnAround", description: "\"turnAround\"" },
      peg$c28 = "pointMe",
      peg$c29 = { type: "literal", value: "pointMe", description: "\"pointMe\"" },
      peg$c30 = [],
      peg$c31 = peg$FAILED,
      peg$c32 = /^[0-9.]/,
      peg$c33 = { type: "class", value: "[0-9.]", description: "[0-9.]" },
      peg$c34 = function(n) { return parseInt(n.join("")); },
      peg$c35 = "-",
      peg$c36 = { type: "literal", value: "-", description: "\"-\"" },
      peg$c37 = function(n) { return parseInt('-' + n.join("")); },
      peg$c38 = /^[a-z,A-Z,0-9 ]/,
      peg$c39 = { type: "class", value: "[a-z,A-Z,0-9 ]", description: "[a-z,A-Z,0-9 ]" },
      peg$c40 = function(s) { return s.join(""); },
      peg$c41 = "()",
      peg$c42 = { type: "literal", value: "()", description: "\"()\"" },
      peg$c43 = function(c) { return [c]; },
      peg$c44 = "(",
      peg$c45 = { type: "literal", value: "(", description: "\"(\"" },
      peg$c46 = ")",
      peg$c47 = { type: "literal", value: ")", description: "\")\"" },
      peg$c48 = " ",
      peg$c49 = { type: "literal", value: " ", description: "\" \"" },
      peg$c50 = function(c, n, b) { return [c, n, b]; },
      peg$c51 = function(c, n) { return [c, n]; },
      peg$c52 = /^[']/,
      peg$c53 = { type: "class", value: "[']", description: "[']" },
      peg$c54 = function(c, s) { return [c, s]; },
      peg$c55 = /^["]/,
      peg$c56 = { type: "class", value: "[\"]", description: "[\"]" },
      peg$c57 = "\n",
      peg$c58 = { type: "literal", value: "\n", description: "\"\\n\"" },
      peg$c59 = "\n\r",
      peg$c60 = { type: "literal", value: "\n\r", description: "\"\\n\\r\"" },
      peg$c61 = "\r\n",
      peg$c62 = { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
      peg$c63 = "{",
      peg$c64 = { type: "literal", value: "{", description: "\"{\"" },
      peg$c65 = null,
      peg$c66 = "}",
      peg$c67 = { type: "literal", value: "}", description: "\"}\"" },
      peg$c68 = function(i) { return i },
      peg$c69 = function(s) { return s },

      peg$currPos          = 0,
      peg$reportedPos      = 0,
      peg$cachedPos        = 0,
      peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
          expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
        + " or "
        + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
        found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parselines();

      return s0;
    }

    function peg$parsecmdWithPosNumber() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c0) {
        s0 = peg$c0;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c2) {
          s0 = peg$c2;
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c3); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c4) {
            s0 = peg$c4;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c6) {
              s0 = peg$c6;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c7); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecmdWithNumber() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c8) {
        s0 = peg$c8;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }

      return s0;
    }

    function peg$parsecmdWithString() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c10) {
        s0 = peg$c10;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c12) {
          s0 = peg$c12;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c14) {
            s0 = peg$c14;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c15); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c16) {
              s0 = peg$c16;
              peg$currPos += 8;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecmdBlock() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c18) {
        s0 = peg$c18;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }

      return s0;
    }

    function peg$parsecmd() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c20) {
        s0 = peg$c20;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c22) {
          s0 = peg$c22;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c23); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c24) {
            s0 = peg$c24;
            peg$currPos += 10;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c25); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 10) === peg$c26) {
              s0 = peg$c26;
              peg$currPos += 10;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c27); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c2) {
                s0 = peg$c2;
                peg$currPos += 8;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 9) === peg$c0) {
                  s0 = peg$c0;
                  peg$currPos += 9;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c1); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 7) === peg$c28) {
                    s0 = peg$c28;
                    peg$currPos += 7;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c29); }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c32.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c33); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c32.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
        }
      } else {
        s1 = peg$c31;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c34(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c35;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$c32.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c32.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c33); }
              }
            }
          } else {
            s2 = peg$c31;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c37(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c31;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c31;
        }
      }

      return s0;
    }

    function peg$parseposNumber() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c32.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c33); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c32.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
        }
      } else {
        s1 = peg$c31;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c34(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c38.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c38.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c39); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c40(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestatement() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsecmd();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c41) {
          s2 = peg$c41;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c42); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c43(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c31;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c31;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecmdBlock();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s2 = peg$c44;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c45); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsenumber();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s4 = peg$c46;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c47); }
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                if (input.charCodeAt(peg$currPos) === 32) {
                  s6 = peg$c48;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c49); }
                }
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  if (input.charCodeAt(peg$currPos) === 32) {
                    s6 = peg$c48;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c49); }
                  }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseblock();
                  if (s6 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c50(s1, s3, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c31;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c31;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c31;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c31;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c31;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c31;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsecmdWithNumber();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s2 = peg$c44;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c45); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsenumber();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s4 = peg$c46;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c47); }
                }
                if (s4 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c51(s1, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c31;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c31;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c31;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c31;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsecmdWithPosNumber();
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s2 = peg$c44;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c45); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseposNumber();
                if (s3 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s4 = peg$c46;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c47); }
                  }
                  if (s4 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c51(s1, s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c31;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c31;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c31;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c31;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsecmdWithString();
              if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 40) {
                  s2 = peg$c44;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c45); }
                }
                if (s2 !== peg$FAILED) {
                  if (peg$c52.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c53); }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsestring();
                    if (s4 !== peg$FAILED) {
                      if (peg$c52.test(input.charAt(peg$currPos))) {
                        s5 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c53); }
                      }
                      if (s5 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s6 = peg$c46;
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c47); }
                        }
                        if (s6 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c54(s1, s4);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c31;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c31;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c31;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c31;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c31;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c31;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsecmdWithString();
                if (s1 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 40) {
                    s2 = peg$c44;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c45); }
                  }
                  if (s2 !== peg$FAILED) {
                    if (peg$c55.test(input.charAt(peg$currPos))) {
                      s3 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c56); }
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parsestring();
                      if (s4 !== peg$FAILED) {
                        if (peg$c55.test(input.charAt(peg$currPos))) {
                          s5 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c56); }
                        }
                        if (s5 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s6 = peg$c46;
                            peg$currPos++;
                          } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c47); }
                          }
                          if (s6 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c54(s1, s4);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c31;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c31;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c31;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c31;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c31;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c31;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsecmd();
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c43(s1);
                  }
                  s0 = s1;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseendline() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c57;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c58); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c59) {
          s0 = peg$c59;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c60); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c61) {
            s0 = peg$c61;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c62); }
          }
        }
      }

      return s0;
    }

    function peg$parseblock() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c63;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseendline();
        if (s2 === peg$FAILED) {
          s2 = peg$c65;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseindentedLine();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseindentedLine();
            }
          } else {
            s3 = peg$c31;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s4 = peg$c66;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c67); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseendline();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c68(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c31;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c31;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c31;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c31;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c31;
      }

      return s0;
    }

    function peg$parseindentedLine() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c48;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c48;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c49); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestatement();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseendline();
          if (s3 === peg$FAILED) {
            s3 = peg$c65;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c69(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c31;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c31;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c31;
      }

      return s0;
    }

    function peg$parseline() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsestatement();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseendline();
        if (s2 === peg$FAILED) {
          s2 = peg$c65;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c69(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c31;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c31;
      }

      return s0;
    }

    function peg$parselines() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseline();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseline();
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();

/* http://pegjs.org/online
pointMe()
log('Waiting for a tap')
waitForTap()
speed(50%)
go(2 seconds)
turnRight()
go
turn(-45 degrees)
log("Wait 3 seconds")
wait(3 seconds)
color('green')
speed(50)
turnRight(20 degree)
go()
repeat(2 times) {
 turnLeft(45)
 go()
 wait(2)
}
turnAround()
wait(1)
stop()
*/
start =
    lines

cmdWithPercent =
    "speed"       // speed(50) // range of 0 to 100

cmdWithSeconds =
    "waitForTap"
   /"waitForHit"
   /"wait"        // wait(1 second)
   /"delay"       // alias for wait
   /"go"          // go(2 seconds) // go for 2 seconds and stop

cmdWithPosDegrees =
    "turnRight"   // turnRight(45 degrees)
   /"right"       // alias for turnRight
   /"turnLeft"    // turnLeft() // turns left 90 degrees
   /"left"        // alias for turnLeft

cmdWithDegrees =
    "turn"        // turn(180); turn(-45 degrees)

cmdWithHexNumber =
    "flash"       // flash(255) // blue
   /"color"       // color(0x0000ff) // also blue
   /"pulse"       // color(0x0000ff) // also blue

cmdWithString =
    "log"         // log("this gets logged")
   /"say"         // alias for log
   /"flash"       // flash('red')
   /"color"       // color("green")
   /"pulse"       // color("green")

cmdBlock =
    "loop"
   /"repeat"

cmd =
    "go"          // go() // go and keep going until stop() or stopFast()
   /"stopFast"    // stopFast() // basically does a 180 degree skid stop
   /"stop"        // stop() // sets speed to 0 on current heading
   /"waitForTap"  // waitForTap() // waits for a single collision
   /"waitForHit"  // waitForHit() // waits for a single collision
   /"turnAround"  // turnAround() // reverse heading
   /"reverse"     // reverse() // ralias for turnAround()
   /"turnLeft"    // turnLeft() // 90 degrees left
   /"left"
   /"turnRight"   // turnRigth() // 90 degrees right
   /"right"
   /"pointMe"     // pointMe() // turns on calibrate mode

number =
    n:[0-9.]+
      { return parseInt(n.join("")); }
   /"-" n:[0-9.]+
      { return parseInt('-' + n.join("")); }

posNumber =
    n:[0-9.]+
      { return parseInt(n.join("")); }

hexNumber =
    n1:"0x" n2:[0-9a-fA-F]+
      { return parseInt(n1 + n2.join("")); }

times =
    " "* "time" "s"?

percent =
    " "* "%"

seconds =
    " "* "second" "s"?

degrees =
    " "* "degree" "s"?

string =
    s:[a-z,A-Z,0-9 ]*
      { return s.join(""); }

statement =
   c:cmd "()"
      { return [c]; }
   /c:cmdBlock "(" n:number times? ")" " "* b:block
      { return [c, n, b]; }
/*
   /c:cmdWithNumber "(" n:number ")"
      { return [c, n]; }
*/
   /c:cmdWithPercent "(" n:posNumber percent? ")"
      { return [c, n]; }
   /c:cmdWithSeconds "(" n:posNumber seconds? ")"
      { return [c, n]; }
   /c:cmdWithPosDegrees "(" n:posNumber degrees? ")"
      { return [c, n]; }
   /c:cmdWithDegrees "(" n:number degrees? ")"
      { return [c, n]; }
/*
   /c:cmdWithPosNumber "(" n:posNumber ")"
      { return [c, n]; }
*/
   /c:cmdWithHexNumber "(" n:hexNumber ")"
      { return [c, n]; }
   /c:cmdWithString "(" ['] s:string ['] ")"
      { return [c, s]; }
   /c:cmdWithString "(" ["] s:string ["] ")"
      { return [c, s]; }
   /c:cmd
      { return [c]; }

endline =
    "\n"
   /"\n\r"
   /"\r\n"

block =
    "{" endline? i:indentedLine+ "}" endline?
      { return i }

indentedLine =
    " "* s:statement endline?
      { return s }

line =
    s:statement endline?
      { return s }

lines =
    line*

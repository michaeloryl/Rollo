/* http://pegjs.org/online
speed 20
repeat 2 times {
 go 2
 reverse
 repeat 1 time {
  pulse 'red'
  gosub mySub
 }
}
sub mySub {
 say "this is a message"
}
*/
start =
    lines

cmdWithPercent =
    "speed"       // speed(50) // range of 0 to 100

cmdWithSeconds =
    "waitForTap"
   /"waitForHit"
   /"wait"        // wait(1 second)
   /"delay"       // alias for wait
   /"go"          // go(2 seconds) // go for 2 seconds and stop

cmdWithPosDegrees =
    "turnRight"   // turnRight(45 degrees)
   /"right"       // alias for turnRight
   /"turnLeft"    // turnLeft() // turns left 90 degrees
   /"left"        // alias for turnLeft

cmdWithDegrees =
    "turn"        // turn(180); turn(-45 degrees)

cmdWithHexNumber =
    "flash"       // flash(255) // blue
   /"color"       // color(0x0000ff) // also blue
   /"pulse"       // color(0x0000ff) // also blue

cmdWithString =
    "log"         // log("this gets logged")
   /"say"         // alias for log
   /"flash"       // flash('red')
   /"color"       // color("green")
   /"pulse"       // color("green")

cmdWithLabel =
    "gosub"       // gosub MySub

cmdBlock =
    "loop"        // loop(2) // loop(2 times)
   /"repeat"      // repeat(3) // repeat(1 time)

cmdBlockWithLabel =
    "sub"         // subroutine MySub { stuff }

cmd =
    "go"          // go() // go and keep going until stop() or stopFast()
   /"stopFast"    // stopFast() // basically does a 180 degree skid stop
   /"stop"        // stop() // sets speed to 0 on current heading
   /"waitForTap"  // waitForTap() // waits for a single collision
   /"waitForHit"  // waitForHit() // waits for a single collision
   /"turnAround"  // turnAround() // reverse heading
   /"reverse"     // reverse() // ralias for turnAround()
   /"turnLeft"    // turnLeft() // 90 degrees left
   /"left"
   /"turnRight"   // turnRigth() // 90 degrees right
   /"right"
   /"pointMe"     // pointMe() // turns on calibrate mode

number =
    n:[0-9.]+
      { return parseInt(n.join("")); }
   /"-" n:[0-9.]+
      { return parseInt('-' + n.join("")); }

posNumber =
    n:[0-9.]+
      { return parseInt(n.join("")); }

hexNumber =
    n1:"0x" n2:[0-9a-fA-F]+
      { return parseInt(n1 + n2.join("")); }

times =
    __ "time" "s"?

percent =
    _ "%"

seconds =
    __ "second" "s"?

degrees =
    __ "degree" "s"?

label =
    s:[a-zA-Z] s2:[a-zA-Z0-9]*
      { return s + s2.join(""); }

string =
    s:[a-zA-Z0-9 ]*
      { return s.join(""); }

rootStatement =
    c:cmdBlockWithLabel __ l:label " "* b:block
      { return [c, l, b]; }

statement =
    c:cmdBlock __ n:number times? " "* b:block
      { return [c, n, b]; }
/*
   /c:cmdWithNumber __ n:number
      { return [c, n]; }
*/
   /c:cmdWithPercent __ n:posNumber percent?
      { return [c, n]; }
   /c:cmdWithSeconds __ n:posNumber seconds?
      { return [c, n]; }
   /c:cmdWithPosDegrees __ n:posNumber degrees?
      { return [c, n]; }
   /c:cmdWithDegrees __ n:number degrees?
      { return [c, n]; }
/*
   /c:cmdWithPosNumber __ n:posNumber
      { return [c, n]; }
*/
   /c:cmdWithHexNumber __ n:hexNumber
      { return [c, n]; }
   /c:cmdWithLabel __ l:label
      { return [c, l]; }
   /c:cmdWithString __ ['] s:string [']
      { return [c, s]; }
   /c:cmdWithString __ ["] s:string ["]
      { return [c, s]; }
   /c:cmd "()"
      { return [c]; }
   /c:cmd
      { return [c]; }

endline = _ [\r\n]+

_  = [ \t]*                         // optional whitespace

__ = [ \t]+                         // mandatory whitespace

block =
    "{" endline? i:blockLine+ _ "}" endline?
      { return i }

blockLine =                         // these can be inside blocks
    _ s:statement endline?
      { return s }

rootLine =                          // these cannot be inside blocks
    _ s:rootStatement endline?
      { return s }

line = blockLine/rootLine

lines = line*
